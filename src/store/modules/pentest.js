import Vue from 'vue'
import axios from 'axios';

import {API_HOST, AxiosConfig} from '../../storage/service'


const state = {
    attackers: [],
    ports: [],
    services: [],
    targets: [],
    credentials: [],
    parameters: [],
    phases: [],
    vulnerabilities: [],
    tools: [],
    actions: [],
    tasks: [],
    tasks_results: [],

    selected_attacker: null,
    selected_target: null,
    selected_credential: null,
    selected_parameter: null,
    selected_phase: null,
    selected_service: null,
    selected_vulnerability: null,
    selected_tool: null,
}

const getters = {
    getAttackerById: (state) => id => state.attackers.find(attacker => attacker.id === id),
    getServiceById: (state) => id => state.services.find(service => service.id === id),
    getTargetById: (state) => id => state.targets.find(target => target.id === id),
    getCredentialById: (state) => id => state.credentials.find(credential => credential.id === id),
    getParameterById: (state) => id => state.parameters.find(parameter => parameter.id === id),
    getActionsByPhaseAndServiceAndVulnerabilityAndTool: (state) => (phase_id, service_id, vulnerability_id, tool_id) => state.actions.filter(action => ((action.phase && action.phase.id || null) === phase_id) && ((action.service && action.service.id || null) === service_id) && ((vulnerability_id && action.vulnerability && action.vulnerability.id || null) === vulnerability_id) && ((tool_id && action.tool && action.tool.id || null) === tool_id)),
    getTaskById: (state) => id => state.tasks.find(task => task.id === id),
    getTaskResultByTaskId: (state) => task_id => state.tasks_results.find(task_result => task_result.task_id === task_id)
}

const actions = {
    // Attackers
    async loadAttackers({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/attackers/`, AxiosConfig);
        commit('SET_ATTACKERS', res.data);
    },
    async createAttacker({ commit }, data) {
        const res = await axios.post(`http://${API_HOST}/api/pentest/attackers/`, data, AxiosConfig)
        commit('CREATE_ATTACKER', res.data);
        return res.data;
    },
    async updateAttacker({ commit }, {attacker, data}) {
        const res = await axios.patch(`http://${API_HOST}/api/pentest/attackers/${attacker.slug}/`, data, AxiosConfig);
        commit('UPDATE_ATTACKER', res.data);
        return res.data;
    },
    async deleteAttacker({ commit }, attacker) {
        await axios.delete(`http://${API_HOST}/api/pentest/attackers/${attacker.slug}/`, AxiosConfig);
        commit('DELETE_ATTACKER', attacker);
    },
    // Ports
    async loadPorts({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/ports/`, AxiosConfig);
        commit('SET_PORTS', res.data);
    },
    // Services
    async loadServices({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/services/`, AxiosConfig);
        commit('SET_SERVICES', res.data);
    },
    // Targets
    async loadTargets({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/targets/`, AxiosConfig);
        commit('SET_TARGETS', res.data);
    },
    async createTarget({ commit }, data) {
        const res = await axios.post(`http://${API_HOST}/api/pentest/targets/`, data, AxiosConfig)
        commit('CREATE_TARGET', res.data);
        return res.data;
    },
    async updateTarget({ commit }, {target, data}) {
        const res = await axios.patch(`http://${API_HOST}/api/pentest/targets/${target.slug}/`, data, AxiosConfig);
        commit('UPDATE_TARGET', res.data);
        return res.data;
    },
    async deleteTarget({ commit }, target) {
        await axios.delete(`http://${API_HOST}/api/pentest/targets/${target.slug}/`, AxiosConfig);
        commit('DELETE_TARGET', target);
    },
    // Credentials
    async loadCredentials({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/credentials/`, AxiosConfig);
        commit('SET_CREDENTIALS', res.data);
    },
    async createCredential({ commit }, data) {
        const res = await axios.post(`http://${API_HOST}/api/pentest/credentials/`, data, AxiosConfig)
        commit('CREATE_CREDENTIAL', res.data);
        return res.data;
    },
    async updateCredential({ commit }, {credential, data}) {
        const res = await axios.patch(`http://${API_HOST}/api/pentest/credentials/${credential.id}/`, data, AxiosConfig);
        commit('UPDATE_CREDENTIAL', res.data);
        return res.data;
    },
    async deleteCredential({ commit }, credential) {
        await axios.delete(`http://${API_HOST}/api/pentest/credentials/${credential.id}/`, AxiosConfig);
        commit('DELETE_CREDENTIAL', credential);
    },
    // Parameters
    async loadParameters({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/parameters/`, AxiosConfig);
        commit('SET_PARAMETERS', res.data);
    },
    async createParameter({ commit }, data) {
        const res = await axios.post(`http://${API_HOST}/api/pentest/parameters/`, data, AxiosConfig)
        commit('CREATE_PARAMETER', res.data);
        return res.data;
    },
    async updateParameter({ commit }, {parameter, data}) {
        const res = await axios.patch(`http://${API_HOST}/api/pentest/parameters/${parameter.id}/`, data, AxiosConfig);
        commit('UPDATE_PARAMETER', res.data);
        return res.data;
    },
    async deleteParameter({ commit }, parameter) {
        await axios.delete(`http://${API_HOST}/api/pentest/parameters/${parameter.id}/`, AxiosConfig);
        commit('DELETE_PARAMETER', parameter);
    },
    // Phases
    async loadPhases({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/phases/`, AxiosConfig);
        commit('SET_PHASES', res.data);
    },
    // Vulnerabilities
    async loadVulnerabilities({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/vulnerabilities/`, AxiosConfig);
        commit('SET_VULNERABILITIES', res.data);
    },
    // Tools
    async loadTools({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/tools/`, AxiosConfig);
        commit('SET_TOOLS', res.data);
    },
    // Actions
    async loadActions({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/actions/`, AxiosConfig);
        commit('SET_ACTIONS', res.data);
    },
    // Tasks
    async loadTasks({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/tasks/`, AxiosConfig);
        commit('SET_TASKS', res.data);
    },
    async createTask({ commit }, data) {
        const res = await axios.post(`http://${API_HOST}/api/pentest/tasks/`, data, AxiosConfig)
        commit('CREATE_TASK', res.data);
        return res.data;
    },
    async updateTask({ commit }, {task, data}) {
        const res = await axios.patch(`http://${API_HOST}/api/pentest/tasks/${task.id}/`, data, AxiosConfig);
        commit('UPDATE_TASK', res.data);
        return res.data;
    },
    async deleteTask({ commit }, task) {
        await axios.delete(`http://${API_HOST}/api/pentest/tasks/${task.id}/`, AxiosConfig);
        commit('DELETE_TASK', task);
    },
    // Tasks Results
    async loadTasksResults({ commit }) {
        const res = await axios.get(`http://${API_HOST}/api/pentest/tasks/tasks_results/`, AxiosConfig);
        commit('SET_TASKS_RESULTS', res.data);
    },
    // Selected
    updateSelectedProp({ commit }, {prop, value}) {
        commit('SET_SELECTED_PROP', {prop, value});
    }
}

const mutations = {
    // Attackers
    SET_ATTACKERS(state, attackers) {
        state.attackers = attackers;
    },
    CREATE_ATTACKER(state, attacker) {
        state.attackers.unshift(attacker);
    },
    UPDATE_ATTACKER(state, attacker) {
        const index = state.attackers.findIndex(x => x.id === attacker.id);
        Vue.set(state.attackers, index, attacker);
    },
    DELETE_ATTACKER(state, attacker) {
        state.attackers = state.attackers.filter(x => x.id !== attacker.id);
    },
    // Ports
    SET_PORTS(state, ports) {
        state.ports = ports;
    },
    // Services
    SET_SERVICES(state, services) {
        state.services = services;
    },
    // Targets
    SET_TARGETS(state, targets) {
        state.targets = targets;
    },
    CREATE_TARGET(state, target) {
        state.targets.unshift(target);
    },
    UPDATE_TARGET(state, target) {
        const index = state.targets.findIndex(x => x.id === target.id);
        Vue.set(state.targets, index, target);
    },
    DELETE_TARGET(state, target) {
        state.targets = state.targets.filter(x => x.id !== target.id);
    },
    // Credentials
    SET_CREDENTIALS(state, credentials) {
        state.credentials = credentials;
    },
    CREATE_CREDENTIAL(state, credential) {
        state.credentials.unshift(credential);
    },
    UPDATE_CREDENTIAL(state, credential) {
        const index = state.credentials.findIndex(x => x.id === credential.id);
        Vue.set(state.credentials, index, credential);
    },
    DELETE_CREDENTIAL(state, credential) {
        state.credentials = state.credentials.filter(x => x.id !== credential.id);
    },
    // Parameters
    SET_PARAMETERS(state, parameters) {
        state.parameters = parameters;
    },
    CREATE_PARAMETER(state, parameter) {
        state.parameters.unshift(parameter);
    },
    UPDATE_PARAMETER(state, parameter) {
        const index = state.parameters.findIndex(x => x.id === parameter.id);
        Vue.set(state.parameters, index, parameter);
    },
    DELETE_PARAMETER(state, parameter) {
        state.parameters = state.parameters.filter(x => x.id !== parameter.id);
    },
    // Phases
    SET_PHASES(state, phases) {
        state.phases = phases;
    },
    // Vulnerabilities
    SET_VULNERABILITIES(state, vulnerabilities) {
        state.vulnerabilities = vulnerabilities;
    },
    // Tools
    SET_TOOLS(state, tools) {
        state.tools = tools;
    },
    // Actions
    SET_ACTIONS(state, actions) {
        state.actions = actions;
    },
    // Tasks
    SET_TASKS(state, tasks) {
        state.tasks = tasks;
    },
    CREATE_TASK(state, task) {
        state.tasks.unshift(task);
    },
    UPDATE_TASK(state, task) {
        const index = state.tasks.findIndex(x => x.id === task.id);
        Vue.set(state.tasks, index, task);
    },
    DELETE_TASK(state, task) {
        state.tasks = state.tasks.filter(x => x.id !== task.id);
    },
    // Tasks Results
    SET_TASKS_RESULTS(state, tasks_results) {
        state.tasks_results = tasks_results;
    },
    // Selected
    SET_SELECTED_PROP(state, {prop, value}) {
        state[prop] = value;
    }
}

export default {
    namespaced: true,
    state,
    getters,
    actions,
    mutations
}